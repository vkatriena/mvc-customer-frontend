@{
    @model CustomerUI.Models.Customer
}
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>

@using (Html.BeginForm("Edit", "Customer", FormMethod.Post))
{
<fieldset>
    <div class="editor-label">
        @Html.LabelFor(x => x.FirstName, "Enter First name:")
    </div>
    <div class="editor-field">
        @Html.EditorFor(x => x.FirstName)
        @Html.ValidationMessageFor(x => x.FirstName)
    </div>
    <div class="editor-label">
        @Html.LabelFor(x => x.LastName)
    </div>
    <div class="editor-field">
        @Html.EditorFor(x => x.LastName)
        @Html.ValidationMessageFor(x => x.LastName)
    </div>
    <div class="editor-label">
        @Html.LabelFor(x => x.PhoneNumber)
    </div>
    <div class="editor-field">
        @Html.EditorFor(x => x.PhoneNumber)
        @Html.ValidationMessageFor(x => x.PhoneNumber)
    </div>
    <div class="editor-label">
        @Html.LabelFor(x => x.Address)
    </div>
    <div class="editor-field">
        @Html.EditorFor(x => x.Address)
        @Html.ValidationMessageFor(x => x.Address)
    </div>
    <div class="editor-label">
        @Html.LabelFor(x => x.City)
    </div>
    <div class="editor-field">
        @Html.EditorFor(x => x.City)
        @Html.ValidationMessageFor(x => x.City)
    </div>
    <div class="editor-label">
        @Html.LabelFor(x => x.State)
    </div>
    <div class="editor-field">
        @Html.EditorFor(x => x.State)
        @Html.ValidationMessageFor(x => x.State)
    </div>
    <div class="editor-label">
        @Html.LabelFor(x => x.PostalCode)
    </div>
    <div class="editor-field">
        @Html.EditorFor(x => x.PostalCode)
        @Html.ValidationMessageFor(x => x.PostalCode)
    </div>
    <div class="editor-label">
        @Html.LabelFor(x => x.CustomerTypeId)
    </div>
    <div class="editor-field">
        @Html.DropDownListFor(x => x.CustomerTypeId,
       Enum.GetValues(typeof(CustomerType)).Cast<CustomerType>().Select(c => new SelectListItem
            {
                Text = c.ToString(),
            Value = ((int)c).ToString()
        }
         ))
    </div>
    <p>
        <button type="submit">Update Customer</button>
    </p>
</fieldset>
            } 
